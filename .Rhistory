# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(class1:class5)) %>%
### Call to mutate() goes here %>%
print
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(c(class1:class5)) %>%
### Call to mutate() goes here %>%
print
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(c(class1:class5))) %>%
### Call to mutate() goes here %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number("c(class1:class5)")) %>%
### Call to mutate() goes here %>%
print
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(class,"class1:class5") %>%
### Call to mutate() goes here %>%
print
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(class,"class1:class5")) %>%
### Call to mutate() goes here %>%
print
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number("class1:class5")) %>%
### Call to mutate() goes here %>%
print
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(class, na = c("class1:class5"))) %>%
### Call to mutate() goes here %>%
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(na = c("class1:class5"))) %>%
### Call to mutate() goes here %>%
print
# We want the values in the class columns to be
# 1, 2, ..., 5 and not class1, class2, ..., class5.
#
# Use the mutate() function from dplyr along with
# parse_number(). Hint: You can "overwrite" a column
# with mutate() by assigning a new value to the existing
# column instead of creating a new column.
#
# Check out ?mutate and/or ?parse_number if you need
# a refresher.
#
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>% mutate(class = parse_number(class, na = c("class1:class5"))) %>%
### Call to mutate() goes here %>%
print
submit()
students4
#
student_info <- students4 %>%
select(id ,name ,sex ) %>%
print
submit()
# Add a call to unique() below, which will remove
# duplicate rows from student_info.
#
# Like with the call to the print() function below,
# you can omit the parentheses after the function name.
# This is a nice feature of %>% that applies when
# there are no additional arguments to specify.
#
student_info <- students4 %>%
select(id, name, sex) %>% unique(student_info)
### Your code here %>%
print
# Add a call to unique() below, which will remove
# duplicate rows from student_info.
#
# Like with the call to the print() function below,
# you can omit the parentheses after the function name.
# This is a nice feature of %>% that applies when
# there are no additional arguments to specify.
#
student_info <- students4 %>%
select(id, name, sex) %>% unique(student_info) %>%
### Your code here %>%
print
# Add a call to unique() below, which will remove
# duplicate rows from student_info.
#
# Like with the call to the print() function below,
# you can omit the parentheses after the function name.
# This is a nice feature of %>% that applies when
# there are no additional arguments to specify.
#
student_info <- students4 %>%
select(id, name, sex) %>% unique() %>%
### Your code here %>%
print
submit()
submit()
submit()
# select() the id, class, midterm, and final columns
# (in that order) and store the result in gradebook.
#
gradebook <- students4 %>% select(id, class, midterm, final)
%>%
print
# select() the id, class, midterm, and final columns
# (in that order) and store the result in gradebook.
#
gradebook <- students4 %>% select(id, class, midterm, final)%>%
print
submit()
passed
failer
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
# Accomplish the following three goals:
#
# 1. select() all columns that do NOT contain the word "total",
# since if we have the male and female data, we can always
# recreate the total count in a separate column, if we want it.
# Hint: Use the contains() function, which you'll
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total"))%>%
gather(par_sex, count, score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
# Accomplish the following three goals:
#
# 1. select() all columns that do NOT contain the word "total",
# since if we have the male and female data, we can always
# recreate the total count in a separate column, if we want it.
# Hint: Use the contains() function, which you'll
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total"))%>%
gather(part_sex, count, score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
# Accomplish the following three goals:
#
# 1. select() all columns that do NOT contain the word "total",
# since if we have the male and female data, we can always
# recreate the total count in a separate column, if we want it.
# Hint: Use the contains() function, which you'll
# find detailed in 'Special functions' section of ?select.
#
# 2. gather() all columns EXCEPT score_range, using
# key = part_sex and value = count.
#
# 3. separate() part_sex into two separate variables (columns),
# called "part" and "sex", respectively. You may need to check
# the 'Examples' section of ?separate to remember how the 'into'
# argument should be phrased.
#
sat %>%
select(-contains("total"))%>%
gather(part_sex, count, score_range) %>%
separate(part_sex = c("part", "sex")) %>%
print
submit
submit()
submit()
0
exit()
quit()
library(swirl)
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("\\192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55).
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, minutes = 15)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(, tz ="America/New_York" )
?now
nyc <- now(tzone ="America/New_York" )
nyc
depart <-  nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = ""Asia/Hong_Kong"")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive, tzone = tz(last_time))
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
getwd("C:\Users\pavansai\Documents\DS\Course-ERA-")
setwd("C:\Users\pavansai\Documents\DS\Course-ERA-")
setwd("C:/Users/pavansai/Documents/DS/Course-ERA-")
tb1 <- read.csv("getdata%2Fdata%2Fss06hid.csv")
tb1
names(tb1)
strsplit(names(tb1), "wgtp")
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv")
tb2
view(tb2)
View(tb2)
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 4)
?read.csv
history()
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 231)
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 232)
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 231)
main_value <- gsub(",","", tb2$X.4 )
main_value
main_helper <- function(X){
i = 0;
for(i in length(X)){
if(X[i] == ""){
X[i] = NA;
}
}
return(X)
}
p <- main_helper(main_value)
p
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 231)
tb2 <- tb2[X.4 != ""]
tb2 <- tb2[X.4 != " "]
tb2 <- tb2[X.4 != " ", ]
View(tb2)
library(dplyr)
tb2 <- filter(tb2, X.4 != "" | X.4 != "")
tb2
View(tb2)
tb2 <- filter(tb2, X.4 != "..")
View(tb2)
main_value <- gsub(",","", tb2$X.4 )
mean(main_value)
main_value
class(main_value[1])
main_value <- as.numeric(main_value)
main_value
mean(main_value)
mean(main_value)/length(main_value)
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 231)
main_value <- gsub(",","", tb2$X.4 )
mean(main_value)
main_value <- as.numeric(main_value)
main_value
mean(main_value, na.rm = TRUE)
tb3 <- read.csv("getdata%2Fdata%2FEDSTATS
_Country.csv")
tb3 <- read.csv("getdata%2Fdata%2FEDSTATS_Country.csv")
tb3
tb4 <-  merge(tb2, tb3, by.x = "X", by.y = "CountryCode")
View(tb4)
names(tb4)
tb4$Balance.of.Payments.Manual.in.use
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
nchar(^2(.*)2)
^2(.*)2
nchar(sampleTimes)
nchar(sampleTimes, "2012")
?nchar
library(stringr)
substr(sampleTimes, 1, 4)
p <- substr(sampleTimes, 1, 4)
t <- count(p , "2012")
?count
t <- sampleTimes %>% count("2012")
p <- as.character(sampleTimes)
t <- p %>% count("2012")
t <- p %>% count(2012)
t <- p %>% nchar("2012")
p
p <- substr(sampleTimes, 1, 4)
p
p %>% nchar("2012")
nchar("2012")
nchar(p , "2012")
sapply(p, nchar)
sapply(p, nchar("2012"))
sapply(p, nchar(2012))
sapply(p, count("2012"))
grep(^2012, p)
grep("^2012", p)
class(P)
class(p)
p <- as.list(p)
class(p)
p
sapply(p, count("2012"))
sapply(p, nchar(2012))
sapply(p, nchar("2012"))
lapply(p, count("2012"))
count(p)
count(sampleTimes)
sampleTimes = ymd(sampleTimes)round_date(sampleTimes, "year")
sampleTimes = ymd(sampleTimes)
library(lubridate)
sampleTimes = ymd(sampleTimes)round_date(sampleTimes, "year")
sampleTimes = ymd(sampleTimes)
Y2012 <- subset(sampleTimes, year(sampleTimes) == "2012")
length(Y2012)
Y2012M <- subset(sampleTimes, wday(sampleTimes) == "Monday")
length(Y2012M)
Y2012M
Y2012M <- subset(sampleTimes, wday(sampleTimes, label = TRUE) == "Monday")
Y2012M
Y2012
Y2012M <- subset(Y2012, wday(2012, label = TRUE) == "Monday")
Y2012M
Y2012M <- wday(Y2012, label = TRUE) == "Monday")
length(which(wday(Y2012, label = T) == "Mon"))
length(grep("[Ff]iscal year end.(*)+June", tb4$Special.Notes ))
length(grep("[Ff]iscal year end(.*)+June", tb4$Special.Notes))
length(grep("[Ff]iscal year end(.*)+June", tb4$Special.Notes ))
length(grep("[Ff]iscal year end.(*)+June", tb4$Special.Notes ))
length(grep("[Ff]iscal year end.(*)+June", tb4$Special.Notes))
length(grep("[Ff]iscal year end +June", tb4$Special.Notes))
length(grep("[Ff]iscal year + June", tb4$Special.Notes))
length(grep("[Ff]iscal year", tb4$Special.Notes))
main_value
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 5, nrows = 190)
tb2
tb2 <- filter(tb2, $X.4 != "")
tb2 <- filter(tb2, X.4 != "")
View(tb2)
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 5, nrows = 190)
tb2 <- read.csv("getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 190)
p <- mean(as.numeric(gsub(",","",tb2$X.4)))
p
strsplit(names(tb1), "\\wgtp")
getwed()
getwd()
setwd("C:\Users\pavansai\Documents\DS\Course-ERA-\getdata%2Fprojectfiles%2FUCI HAR Dataset\UC
I HAR Dataset>")
setwd("C:\Users\pavansai\Documents\DS\Course-ERA-\getdata%2Fprojectfiles%2FUCI HAR Dataset\UCI HAR Dataset>")
setwd("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset>")
files_train <- list.files("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset/test>")
files_train
View(files_train)
files_train <- list.files("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset/test/Inertial Signals>")
files_train
files_train <- list.files("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset/test/Inertial Signals")
files_train <- list.files("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset/test")
files_train1 <- list.files("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset/test/Inertial Signals")
View(files_train1)
files_mainTrain <- files_train + files_train1
files_mainTrain <- combine(files_train, files_train1)
files_mainTrain
View(files_mainTrain)
txt_filesTrain_df <- lapply(files_mainTrain, function(x) {read.table(file = x, header = T, )})
txt_filesTrain_df <- lapply(files_mainTrain, function(x) {read.table(file = x, header = T, sep = "")})
txt_filesTrain_df <- lapply(files_mainTrain, function(x) {read.table(file = x, header = T, sep = "m")})
p <- do.call("rbind", lapply(list, function))
p <- do.call("rbind", lapply(files_mainTrain, as.data.frame))
p
p[1]
p[[1]]
View(p)
files_trainMain <- list.files("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset/train/Inertial Signals")
View(files_trainMain)
files_trainMain1 <- list.files("C:/Users/pavansai/Documents/DS/Course-ERA-/getdata%2Fprojectfiles%2FUCI HAR Dataset/UCI HAR Dataset/train")
files_mianTrain1 <- combine(files_trainMain, files_trainMain1)
files_mainTest <- files_mainTrain
rm(files_train)
rm(files_mainTrain)
files_mainTest
files_mianTrain1
main_dataSet <- combine(files_mainTest, files_mianTrain1)
main_dataSet
