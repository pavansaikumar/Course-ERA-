library(swirl)
swirl()
submit()
evaluate(sd, c(1.4,
| 3.6, 7.9, 8.8))
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x), c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[2]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit
submit()
telegram("How Are you")
submit()
submit()
mad_libs(place = y, adjective = 14, noun = jj)
mad_libs(place = "y", adjective = "14", noun = "jj")
submit()
submit()
submit()
'I' 'Love' %p% 'R'
'I Love' %p% 'R'
'I' %p% 'Love' %p% 'R'
'I' %p% 'Love' %p% 'R!'
'I' %p% 'love'%p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <-as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
?POSIXct
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- as.POSIXlt("October 17, 1986 08:24")
t3 <- strptime("October 17, 1986 08:24")
t3 <- strptime(October 17, 1986 08:24)
t3 <- strptime(October 17 1986 08:24)
t3 <- October 17 1986 08:24
t3 <- October 17, 1986 08:24
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
74
t4
class(t4)
Sys.time() > t1
Sys.time()  -t1
difftime(Sys.time(), t1, units = 'days')
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stoppind Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(title = "My Plot", x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, colors = red)
plot(cars, colors = "red")
plot(cars, col = 2)
plot(cars, col = 2, xlim = c(10,15))
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data("mtcars")
data(mtcars)
boxplot(mtcars)
?boxplot
boxplot(mtcars, formula = mpg~cyl)
boxplot(data = mtcars, formula = mpg~cyl)
boxplot(data = mtcars, formula = mpg ~ cyl)
formula = mpg ~ cyl, data = mtcars
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
quit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
slapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range())
lappy(flag_shapes, range
)
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_valss)
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$animate, flags$landmass, summary)
tapply( flags$landmass, summary)
tapply(flags$population, flags$landmass,summary.)
tapply(flags$population, flags$landmass,summary)
library(datasets)
data("iris")
?iris
data(iris)
head(iris)
virgi_mean <- subset()
virgi_mean <- subset(iris, iris$Sepal.Length)
lapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, mean)
dim(iris)
sol <- sapply(iris$Sepal.Length, mean)
mean(sol)
round(mean(sol))
library(datasets)
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
p <- subset(mtcars, cyl == 4)
p
t <- subset(mtcars, cyl == 8)
p <- lapply(p$hp, mean)
t <- lapply(t$hp, mean)
p-t
View(p)
p
View(t)
t
p <- subset(mtcars, cyl == 4)
t <- subset(mtcars, cyl == 8)
t
me <- lapply(p, mean)
me
mhp <- 82.63636
thp <-  lapply(p, mean)
thp <-  lapply(t, mean)
thp
thp <- 209.2143
abs(mhp - thp)
t <- abs(mhp - thp)
abs(t)
round(t)
debug(ls)
ls
ls
library(datasets)
data(iris)
iris
iris
Q
library(datasets)
data(iris)
iris
virgi_ms <- subset(iris, iris$Species == 'virginica')
virgi_ms
me <- sapply(virgi_ms, mean)
me <- sapply(virgi_ms$Sepal.Length, mean)
me
me <- sapply(virgi_ms$Sepal.Length, mean)
me
virgi_ms <- subset(iris, iris$Species == 'virginica')
?mean
mean(virgi_ms$Sepal.Length)
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("chicago.rds")
getwd()
carsdata <- data(cars)
cars
dim(cars)
str(cars)
names(cars)[1:2]
subset <- select(cars, speed:dist)
head(subset)
mtcars
mt_helper <- filter(mtcars, mtcars$cyl > 8)
mt_helper <- filter(mtcars, cyl > 8)
mt_helper
mt_helper <- filter(mtcars, cyl < 8)
mt_helper
mt_helper <- filter(mtcars, cyl == 8)
mt_helper
nrow(mt_helper)
mt_helper <- arrange(mtcars, cyl)
mt_helper
mt_helper <- arrange(mtcars, mpg)
mt_helper
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
length()
length()x
length(x)
f <- gl(3,10)
split(x, f)
f <- gl(4,10)
f
f <- gl(5,6)
split(x, f)
library(datasets)
?datasets
head(airquality)
split_by_month <- split(airquality, airquality$Month)
split_by_month
lapply(s, function(x){})
lapply(s, function(x){colMeans(x[,c("Ozone", "Solar.R", "Wind")])})
lapply(split_by_month, function(x){colMeans(x[,c("Ozone", "Solar.R", "Wind")])})
sapply(split_by_month, function(x){colMeans(x[,c("Ozone", "Solar.R", "Wind")])})
sapply(split_by_month, function(x){colMeans(x[,c("Ozone", "Solar.R", "Wind")]), na.rm = TRUE})
sapply(split_by_month, function(x){colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE})
sapply(split_by_month, function(x){colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)})
library(swirl)
swirl()
head(flags)
dim(flags)
?flags
??flags
class(flags)?
>
class(flags)?
>
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <-  sapply(flag_shapes, range)
clea_first <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
clea_first <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Desktop/DS/Course ERA")
clea_first <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Desktop/DS/Course ERA", method = curl)
clea_first <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Desktop/DS/Course ERA", method = "curl")
library(RCurl)
library(bitops)
library(RCurl)
clea_first <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Desktop/DS/Course ERA", method = "curl")
URl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x <- getURI(URl)
x
out <- read.csv(textConnection(x))
head(out)
data_sub <- subset(out, out$VAL >= 1000000)
nrow(data_sub)
data_sub <- subset(out, out$VAL >= 24)
nrow(data_sub)
tidy_not <- data_sub$FES
URl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
x <- getURI(URl)
clea_first <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Documents/DS/Course-ERA-", method = "curl")
library(RCurl)
clea_first <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Documents/DS/Course-ERA-", method = "curl")
clea_first <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Documents/DS/Course-ERA-", method = "curl")
setInternet2(use=T)
clea_first <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Documents/DS/Course-ERA-", method = "libcurl")
clea_first <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "C:/Users/pavansai/Documents/DS/Course-ERA-")
clea_first <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" , destfile = "~/Users/pavansai/Documents/DS/Course-ERA-")
install.packages("MYSQL")
install.packages("RMySQL")
library("MySQL")
library("RMySQL")
install.packages("DBI")
install.packages("DBI")
library("RMySQL")
library("DBI")
library("RMySQL")
?MySQL
library(dbConnect)
install.packages("dbConnect")
ucscDb <- dbConnect(MySQL(), user = "genome", host ="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
install.packages(("httr"))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "cbbcb6ee3d2aeca266b4",
secret = "a5765ffff9768c4a3ed524b0a5700a8d27361620"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
setwd("C:/Users/pavansai/Documents/DS/Course-ERA-")
acs <- read.csv("getdata%2Fdata%2Fss06pid.csv")
head(acs)
sqldf("select pwgtp1 from acs where AGEP <50")
library("sqldf")
sqldf("select pwgtp1 from acs where AGEP <50")
detach("package:RMySQL", unload=TRUE)
sqldf("select * from df limit 6")
sqldf("select * from acs limit 6")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique_func <- sqldf("select distinct AGEP from acs")
unique_func
url <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readlines(con)
Library(XML)
Library("XML")
install.packages("XML")
Library(XML)
library("sqldf")
library("XML")
html <- htmlTreeParse(url, useInternalNodes = T)
html <- htmlTreeParse(file = url, useInternalNodes = T)
library(httr)
html <- GET(url)
input <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- GET(input)
html <- GET(url = input)
html <- GETURL(url = input)
html <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
html
content2 = Content(html2, as = "text")
content2 = content(html2, as = "text")
content2 = content(html, as = "text")
parseHtml = htmlParse(content2, asText = TRUE)
xpathSapply(parseHtml, "//title", xmlValue)
rootnode <- xmlRoot(parseHtml)
rootnode
rootnode <- xmlRoot(content2)
?nchar
class(parseHtml)
nchar(parseHtml)
nchar(as.character(parseHtml)
)
p <- xpathSapply(parseHtml, xmlValue)
p <- xmlSApply(parseHtml, xmlValue)
p <- xpathSApply(parseHtml, xmlValue)
xpathSApply(parseHtml, xmlValue)
content2
parseHtml
html <- htmlTreeParse(parseHtml, useInternalNodes = T)
url <- "http://biostat.jhsph.edu/~jleek/contact.htm"
html <- htmlTreeParse(url, useInternalNodes = T)
library(httr)
library(XML)
html <- htmlTreeParse(url, useInternalNodes = T)
library(XML)
html <- htmlTreeParse(url, useInternalNodes = T)
n<-readHTMLTable(htmlParse(url))
html <- htmlTreeParse(url, useInternalNodes = T)
class(parseHtml)
parseHtml[1]
htmlCode <- readLines(connection)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
class(htmlCode)
library(jsonlite)
library(httpuv)
install.packages("httpuv")
library(httpuv)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "cbbcb6ee3d2aeca266b4",
secret = "a5765ffff9768c4a3ed524b0a5700a8d27361620")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
